name: Deploy Office Add-in to Vercel

on:
  push:
    branches: [main, office-addin-figma]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run license cleanup
        run: npm run clean:duplicates || true

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint || true

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/office-addin-figma'

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        run: vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Add deployment summary
        run: |
          echo "### 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Office Add-in build completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "🌍 **Production deployment initiated**" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔍 **Preview deployment created**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Project Structure Summary
        run: |
          echo "### 📁 Project Structure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "src/" >> $GITHUB_STEP_SUMMARY
          echo "├── components/" >> $GITHUB_STEP_SUMMARY
          echo "│   └── slides/           # Abaco presentation components" >> $GITHUB_STEP_SUMMARY
          echo "│       ├── ObjectiveSlide.tsx" >> $GITHUB_STEP_SUMMARY
          echo "│       ├── ChannelStrategySlide.tsx" >> $GITHUB_STEP_SUMMARY
          echo "│       ├── KAMStrategySlide.tsx" >> $GITHUB_STEP_SUMMARY
          echo "│       ├── MarketingFunnelSlide.tsx" >> $GITHUB_STEP_SUMMARY
          echo "│       └── TacticsSlide.tsx" >> $GITHUB_STEP_SUMMARY
          echo "├── api/                  # API integrations" >> $GITHUB_STEP_SUMMARY
          echo "├── supabase/            # Supabase configuration" >> $GITHUB_STEP_SUMMARY
          echo "└── styles/              # CSS and design system" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "scripts/" >> $GITHUB_STEP_SUMMARY
          echo "├── find-license-matches.js  # License detection" >> $GITHUB_STEP_SUMMARY
          echo "├── cleanup-now.sh          # Automated cleanup" >> $GITHUB_STEP_SUMMARY
          echo "└── pre-commit-check.sh     # Git hooks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docs/" >> $GITHUB_STEP_SUMMARY
          echo "├── AI_APIS.md              # API integration guide" >> $GITHUB_STEP_SUMMARY
          echo "├── SUPABASE_GUIDE.md       # Supabase setup" >> $GITHUB_STEP_SUMMARY
          echo "└── DESIGN_SYSTEM.md        # Design guidelines" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
